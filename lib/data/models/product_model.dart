import 'package:json_annotation/json_annotation.dart';

import '../../domain/entities/product.dart';

part 'product_model.g.dart';

@JsonSerializable()
class ProductModel extends Product {
  const ProductModel({
    required super.id,
    required super.code,
    required super.name,
    @JsonKey(name: 'brand_id') required super.brandId,
    @JsonKey(name: 'category_id') required super.categoryId,
    @JsonKey(name: 'subcategory_id') required super.subcategoryId,
    @JsonKey(name: 'image_url') super.imageUrl,
    super.description,
    super.size,
    @JsonKey(name: 'size_measure') super.sizeMeasure,
    super.package,
    @JsonKey(name: 'variable_weight') super.variableWeight,
    super.label,
    @JsonKey(name: 'is_offer') super.isOffer,
    super.active = true,
    @JsonKey(name: 'created_at') required super.createdAt,
    @JsonKey(name: 'updated_at') required super.updatedAt,
    @JsonKey(name: 'deleted_at') super.deletedAt,
    @JsonKey(name: 'units_per_bundle') super.unitsPerBundle,
    @JsonKey(name: 'alternative_name') super.alternativeName,
    @JsonKey(name: 'bundle_package') super.bundlePackage,
    @JsonKey(name: 'unit_cost') super.unitCost,
    @JsonKey(name: 'billing_unit') super.billingUnit,
    @JsonKey(name: 'order_unit') super.orderUnit,
    @JsonKey(name: 'min_quantity') super.minQuantity,
    @JsonKey(name: 'suggested_increment') super.suggestedIncrement,
    @JsonKey(name: 'is_fractionable') super.isFractionable,
    @JsonKey(name: 'weight_in_grams') super.weightInGrams,
    super.sku,
    super.upc,
    @JsonKey(name: 'direct_load') super.directLoad,
    super.observations,
    @JsonKey(name: 'supplier_code') super.supplierCode,
    @JsonKey(name: 'purchase_unit') super.purchaseUnit,
    @JsonKey(name: 'order_name') super.orderName,
    @JsonKey(name: 'order_unit_conversion') super.orderUnitConversion,
    @JsonKey(name: 'supplier_id') super.supplierId,
    super.tax,
    @JsonKey(name: 'billing_unit_conversion') super.billingUnitConversion,
    @JsonKey(name: 'sector_id') super.sectorId,
  });

  factory ProductModel.fromJson(Map<String, dynamic> json) =>
      _$ProductModelFromJson(json);

  Map<String, dynamic> toJson() => _$ProductModelToJson(this);

  factory ProductModel.fromEntity(Product product) {
    return ProductModel(
      id: product.id,
      code: product.code,
      name: product.name,
      brandId: product.brandId,
      categoryId: product.categoryId,
      subcategoryId: product.subcategoryId,
      imageUrl: product.imageUrl,
      description: product.description,
      size: product.size,
      sizeMeasure: product.sizeMeasure,
      package: product.package,
      variableWeight: product.variableWeight,
      label: product.label,
      isOffer: product.isOffer,
      active: product.active,
      createdAt: product.createdAt,
      updatedAt: product.updatedAt,
      deletedAt: product.deletedAt,
      unitsPerBundle: product.unitsPerBundle,
      alternativeName: product.alternativeName,
      bundlePackage: product.bundlePackage,
      unitCost: product.unitCost,
      billingUnit: product.billingUnit,
      orderUnit: product.orderUnit,
      minQuantity: product.minQuantity,
      suggestedIncrement: product.suggestedIncrement,
      isFractionable: product.isFractionable,
      weightInGrams: product.weightInGrams,
      sku: product.sku,
      upc: product.upc,
      directLoad: product.directLoad,
      observations: product.observations,
      supplierCode: product.supplierCode,
      purchaseUnit: product.purchaseUnit,
      orderName: product.orderName,
      orderUnitConversion: product.orderUnitConversion,
      supplierId: product.supplierId,
      tax: product.tax,
      billingUnitConversion: product.billingUnitConversion,
      sectorId: product.sectorId,
    );
  }

  Product toEntity() {
    return Product(
      id: id,
      code: code,
      name: name,
      brandId: brandId,
      categoryId: categoryId,
      subcategoryId: subcategoryId,
      imageUrl: imageUrl,
      description: description,
      size: size,
      sizeMeasure: sizeMeasure,
      package: package,
      variableWeight: variableWeight,
      label: label,
      isOffer: isOffer,
      active: active,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      unitsPerBundle: unitsPerBundle,
      alternativeName: alternativeName,
      bundlePackage: bundlePackage,
      unitCost: unitCost,
      billingUnit: billingUnit,
      orderUnit: orderUnit,
      minQuantity: minQuantity,
      suggestedIncrement: suggestedIncrement,
      isFractionable: isFractionable,
      weightInGrams: weightInGrams,
      sku: sku,
      upc: upc,
      directLoad: directLoad,
      observations: observations,
      supplierCode: supplierCode,
      purchaseUnit: purchaseUnit,
      orderName: orderName,
      orderUnitConversion: orderUnitConversion,
      supplierId: supplierId,
      tax: tax,
      billingUnitConversion: billingUnitConversion,
      sectorId: sectorId,
    );
  }
}
